最終更新：2017/08/16
依頼大改造による仕様変更などを説明する
◆書いたひと：morph



◆仕様
使用する変数とか
・IRAI_SLOT:1～5
　受託した依頼の情報を記録する変数
　ただし、改造前と同じく要素0は使わない
　ここに記録されているのは
　　IRAI_SLOT:X / 1000 = 依頼者のID（eraTWでは登録番号であり、キャラ番号でもある）
　　IRAI_SLOT:X % 1000 = 依頼のID
　依頼者の取得用には専用の@GET_IRAI_CLIENT関数が存在する
・依頼のIDは1～99が一般依頼、101～999がキャラごとの固有依頼となっている
　一般依頼の情報は一般依頼.ERB、固有依頼の情報は固有依頼.ERB
　この他、一部の依頼関連情報がキャラデータ関数内に追加されている
・IRAI_DATA:1～5
　受託した依頼のおおまかな達成条件を記録する
　　IRAI_SLOT:X / 1000 = 達成条件となるITEM/場所/人物のID、これを使用しないものもある
　　IRAI_SLOT:X % 1000 = 依頼の業務内容
・依頼業務内容の一覧（ゲーム中で直接表示されることはない）
　 1＝作業　　　　：実行するとその場で時間が経過して終わるもの、依頼者をTARGETにしている必要がある
　 2＝面会　　　　：2017/08/16、廃止して空き番号になりました
　　　　　　　　　　特定の人物をCLIENTのもとに連れてくることを要求するもの（2人とMASTERが同じ場所にいて、CLIENTをTARGETにする）
　 3＝調達　　　　：特定のアイテムを特定個数要求するもの（あややの酒要求依頼などには複数種類のITEMが納入可能なので不適切）
　 4＝伝令（人物）：特定の人物との接触を求められるもの（特定人物をTARGETにすることで依頼実行可能）
　 5＝伝令（場所）：特定の場所への移動を求められるもの（MASTERが特定の場所にいくことで依頼実行可能）
　 6＝捜索（人物）：基本的に伝令と同一だが誰が条件になっているのかを伏せる
　 7＝捜索（場所）：基本的に伝令と同一だがどこが条件になっているのを伏せる
　99＝その他　　　：完全独自処理を作りたい時用
・IRAI_SUB:1～5
　その他の情報、現状では要求アイテムの個数の記録くらいにしか使ってないが
　とりあえず変数をひとつ確保しておけば依頼実装の柔軟性が格段にあがりそうなので作っておいた
　使い途はいろいろあるでしょう
・IRAI_DEADLINE:1～5
　依頼の締め切り日
　基本的に受託日にDAY + Xの数値を記録するが
　例外として0の場合はその日のうちに依頼をこなさないとダメ
　ただ、期限切れ判定は就寝時に行われると思うので起きて活動中に実行して報告できればクリアできると思う

・CFLAG:404（依頼内容）
　これについてはIRAI_SLOTに記録する情報と同一、依頼者と依頼IDの番号を一度に記録している
・CFLAG:403（依頼状況）
　パターンを細分化した
　-1　依頼発生直後
　 1　依頼未受託
　 2　依頼中
　 3　依頼達成
　 4　期限切れ
　 5　報告忘れ
　 6　依頼失敗
　103 依頼終了（成功）
　104 依頼終了（期限切れ）
　105 依頼終了（報告忘れ）
　106 依頼終了（失敗）
　3～6は依頼の結果が確定した状況であり、依頼者に報告を行うことで
　依頼がスロットから削除され、103～106に移行する
　逆に言えば、報告が終わるまでスロットは空かない
　-1と100以降は以下の事態を防止するため
　・発生直後に依頼が消滅する
　・終了直後に依頼がまた発生する




◆新規依頼の実装に関しての注意
・一般依頼の依頼名の被り
　CLIENT側が区別をつけられない依頼の表現として使うことができます
　例）＜どうしてもみつからない＞
　　この依頼は落し物の捜索依頼であり
　　達成条件として人物、もしくは場所がキーになっている
　　もちろん、依頼者はどちらが条件になっているのか知っているはずがない
　　また、プレイヤーに情報を伏せておく為にも別の依頼IDで同一の名称を使用する
　この場合、TARGET側の口上の分岐条件には注意が必要になることがあります
・固有依頼名と一般依頼名の被り
　全く問題ない（先に一般/固有の分岐を入れる）
・固有依頼名のキャラ間での被り
　例）霊夢の固有依頼名と魔理沙の固有依頼名で被ってた
　全く問題ない（先にキャラごとの分岐を入れる）
・固有依頼の同一キャラ内での被り
　依頼IDでの分岐を設ければ区別は簡単ですが特にそうするべき理由がないのなら避けたほうが無難です



◆新規依頼の実装方法
おおまかに一般/固有の二種類の依頼がありますが
必要となるのは以下の二つです

　１．依頼IDの持つ情報（依頼名など）
　２．各依頼実行時の処理（地の文など含む）

ａ）一般依頼を実装する場合
一般依頼は複数のキャラで発生しえる依頼です（素質等を条件に発生を制御することももちろん可能）
作成する関数は次の3つです
・@EXIST_一般依頼X
・@一般依頼X
・@IRAI_一般X
Xが依頼IDとなり、1～99の数字を使うことが出来ます
既に使われている数字を使用することはできません


各関数の説明
・@EXIST_一般依頼X
この関数は「一般依頼Xが存在します」ということを示すためだけの関数です
存在していればそれだけでよいです


・@一般依頼X
ここに依頼関連の各種データを記述していきます

引数の説明
ARG 　　この関数では常に依頼者の登録番号となります
O_DATA　参照される項目を表します
V_NAME　気にしなくていいです

この関数はFUNCTION関数ですが、RETURNFやRETURNを使用することは出来ません
必ず専用の関数を使用して戻り値のやり取りを行います
各項目で明示的に数値を渡さない場合には戻り値0/空文字列扱いになるので注意が必要です

文字列"TEST"を渡したい場合、
CALLF MAKE_STR(V_NAME, "TEST")
;↑STR型一時変数「V_NAME」を文字列"TEST"で作ってくれ命令
;※　V_NAMEはこの関数の呼び出し元で自動で付与してくれるものなので気にしなくてよし
;　　一時参照用の使い捨ての名前

FORM文字列%CALLNAME:MASTER%を渡したい場合、
CALLF MAKE_STR(V_NAME, @"%CALLNAME:MASTER%")

整数"1"を渡したい場合
CALLF MAKE_INT(V_NAME, 1)

もう一つ、注意として
同じV_NAMEで複数回のMAKE_INTを行なってしまうとエラーになります
MAKE_INT/STRは一時変数の消去前に名称被りで同じ変数名を使うとエラー

これは大丈夫ですが
	IF RAND:2
		CALLF MAKE_INT(V_NAME, 1)
	ELSE
		CALLF MAKE_INT(V_NAME, 1)
	ENDIF
	;分岐しているため各CALLFは重複しない
こっちはエラー
	SIF RAND:2
		CALLF MAKE_INT(V_NAME, 1)
	CALLF MAKE_INT(V_NAME, 1)
	;RAND:2 == 1である場合に処理が重複して同じV_NAMEが使われてエラー

エラー回避にはこんな感じの構文を使う
例）普段は0だが霊夢が処女だと解禁される
	CALLF MAKE_INT(V_NAME, 0)
	SIF TALENT:1:処女
		CALLF SET_INT(V_NAME, 1)
		;↑一時変数「V_NAME」を探して数値「1」を代入してくれ命令
		;　必ずMAKE_INTした後で使うこと



===============================================================================================
ここから、@一般依頼XのO_DATAの各項目についての説明
===============================================================================================
O_DATAの種類＝参照される依頼の情報
CASE "依頼名"
	CALLF MAKE_STR(V_NAME, "依頼のなまえ")
CASE "依頼内容表示"
	CALLF MAKE_STR(V_NAME, @"%CALLNAME:ARG%の依頼を実行")
CASE "依頼報酬表示"
	CALLF MAKE_STR(V_NAME, @"お金\\500")
CASE "依頼備考表示"
	CALLF MAKE_STR(V_NAME, "わかりにくい実行条件がある場合にヒントを書く")

CASE "依頼実行コマンド名"
	CALLF MAKE_STR(V_NAME, "依頼実行")

ここまでの5項目はそのままなのであまり説明することはありません
依頼の説明や確認の際に表示される情報です
@"\\500"というのは円記号500という文字列です



CASE "依頼報告不要"
この項目は情報表示での表示文字列としても使用されます
この項目を記述した依頼は報告を忘れてもペナルティがありません
依頼を達成し、報告をしなかった場合に一日の終了時にそのまま消滅します
ただし、このオプション単体だとペナルティが無いだけで報酬処理は一切行われません
作業依頼など、必ず依頼者をTARGETとして実行するタイプの依頼では意味が無い点にも注意して下さい
報酬や好感度、信頼度の操作をしたい場合には
@IRAI_一般/固有Xに「依頼報告不要」で処理を作成して下さい

CASE "依頼内容"
	CALLF MAKE_INT(V_NAME, MAKE_IRAI_DATA(0, "作業"))
依頼受託時にIRAI_DATA:Xに代入される整数型変数を記述します
この項目は依頼内容を表しますが、@MAKE_IRAI_DATA関数を使用して文字列で業種を指定します
使用できる文字列は@IRAI_TASK_TO_DATAを参照して下さい
業種を指定することで、依頼実行可能条件の一部の判定を省略できるようになります
例えば、
	CALLF MAKE_INT(V_NAME, MAKE_IRAI_DATA(0, "作業"))
"作業"なら依頼者をTARGETにしている時に実行できます
第一引数の0は意味を持ちません

	CALLF MAKE_INT(V_NAME, MAKE_IRAI_DATA(1, "伝令（人物）"))
"伝令（人物）"なら特定の人物をTARGETにしている時に実行できます
この場合、登録番号が1の人物、霊夢がTARGETの時に実行できる依頼です
ただし、なりきりモードや出禁の状況によっては不自然/達成不可能な依頼が発生する可能性が出てくるため
人物を指定する依頼の場合、後述の「依頼発生条件」に判定を挟む必要が出てきます
必ず式中関数CAN_MEETでの判定を行なって下さい（霊夢の固有依頼102の発生条件を参考にして下さい）
式中関数RAND_PERSON(CHARA)を使用する場合はこの判定は不要です
（ランダム抽選時に内部で判定しているので）

	CALLF MAKE_INT(V_NAME, MAKE_IRAI_DATA(222, "伝令（場所）"))
"伝令（場所）"はMASTERが特定の場所にいる時に実行できます
この場合、場所IDが222、寺子屋に行った時に実行できる依頼です
この依頼の実行処理ではTARGETが誰であっても実行可能です
判定時にGET_MAP_REPLACEMENTを行うため、詳細マップでの場所IDを使って下さい

	CALLF MAKE_INT(V_NAME, MAKE_IRAI_DATA(GETNUM(ITEM, "キュウリ"), "調達"))
"調達"はITEMを要求する依頼です
この依頼ではキュウリを要求しています（要求個数は別項目で設定します）
一つのITEMの種類の個数しか指定することはできず、実行時には依頼者をTARGETにしていなければなりません
複数の候補から選択するような場合は「作業」もしくは「その他」にして自力で判定を組む必要があります

CASE "依頼サブ"
依頼受託時にIRAI_SUB:Xに代入される整数型変数を記述します
この項目は依頼受託時の初期値の設定に使用されます
現時点では、業種：調達の場合の調達個数以外では使用されていません
その他の業種では自由に設定を行い、判定に利用することが可能です

CASE "依頼期限"
依頼受託時に設定される期限です
3なら3日以内にこなして報告しなくてはいけません
0である場合、今日中に実行する必要があります

CASE "依頼発生率"
必ず設定して下さい
正の値を指定しなかった場合、エラーの原因になります
これは他の一般依頼との相対確率です
依頼Aが10、依頼Bが10なら双方の依頼が50:50の確率で選ばれます

CASE "依頼発生条件"
必ず設定して下さい
数値を指定しなかった場合、発生しなくなります
特定の条件でのみ発生する依頼を作りたい時に使用します

CASE "依頼受託可能条件"
必ず設定して下さい
数値を指定しなかった場合、受託できません
特定の条件でのみ受託できる依頼を作りたい時に使用します
まず、基本的に@COM_ABLE366を通過する必要がある点に注意が必要です

CASE "依頼実行可能条件"
必ず設定して下さい
数値を指定しなかった場合、実行できません
特定の条件でのみ実行できる依頼を作りたい時に使用します
まず、基本的に@COM_ABLE367を通過する必要がある点に注意が必要です
前述のとおり、依頼業種による影響を受けます
依頼業種別の可不可判定は@IRAI_DO_ABLEで行なっています
それ以外で、何か条件を設けたい場合に使用します

注意点として、この項目にRANDを使用するような条件を使用してはいけません
現状では「現在実行可能な依頼スロット」を見るのにF関数を使用して取得していますが
・COM367のABLE処理
・COM367のコマンド名表示
・COM367のコマンド名取得
・COM367の実行処理
このように１コマンドの実行までに複数回の呼び出しをかけるため
呼び出しのたびに可否が変化してしまうのはよろしくないです

実行の可不可ではなく依頼実行時の結果（成功/失敗/続行）をランダムにしてください

CASE "依頼消滅条件"
未受託状態の依頼人の持っている依頼が消滅する確率です
何も指定しなかった場合、発生後に一度受託しないと消滅しなくなります
（一度発生するとその依頼での未受託状態が固定されて他の依頼に更新されなくなります）

この項目は1日1回しか参照しないのでRANDを使用することができます
こんな感じで設定するのがいいかと思います
;30％で消失
	SIF RAND:100 < 30
		CALLF MAKE_INT(V_NAME, 1)

CASE "依頼人連れ出し可能"
連れ出し機能はMAIN_MAPでのみ有効です
この項目で1を返すと、依頼中に依頼人を連れ出すことが可能になります

CASE "依頼連れ出し対象"
連れ出し機能はMAIN_MAPでのみ有効です
ここで返した登録番号のキャラを依頼中に連れ出せるようになります
この項目は記述が複雑になるため、具体的に説明します

ア）連れ出し対象が依頼によって指定される場合
その依頼IDではかならず特定の人物を指定するという場合には番号決め打ちで返してしまっても構いません

イ）無節操にキャラを連れ出せるようにする場合
どうかとは思いますが
TARGETのIDを返せばTARGETは必ず連れ出せるようにはできるはず
（こちらからIDを渡すことしか出来ないため、いちいちTARGET変更の必要あり）
こんな依頼でも実装しないかぎりは必要ないと思われる
実装案）＜紅い月夜のティーパーティー＞
・おぜうの依頼、満月の夜限定、紅魔館在住あなた限定
・今からお茶会をするから人を集めなさい
・集めた人数で評価を決定（おそらく、活動時間的に無茶）

ウ）連れ出し対象がランダムに決定される場合（特に一般依頼）
この場合には、受託時に対象を決定し、どこかに記録しておく必要があります
依頼関係で記録可能な場所はIRAI_DATAもしくはIRAI_SUBの2箇所です
業種がその他でない場合はIRAI_DATAは使用済みと思われるので
必然的にIRAI_SUB一択になります
実際に設定するにあたって必要なのは次の3つの処理

１．CLIENT_IDから依頼スロット取得
CHK_SLOT = SEARCH_IRAI_SLOT(CFLAG:CLIENT_ID:依頼内容)
現在受託中のこの依頼が何番目のスロットに入っているかが取得できます
これを使って各種の情報を取得します

２．どこかに記録したであろう、依頼連れ出し対象のID取得
これは書いた内容次第になります

具体例）
CASE "依頼内容"
	CALLF MAKE_INT(V_NAME, MAKE_IRAI_DATA(依頼連れ出し対象_ID, "その他"))
もしも依頼連れ出し対象_IDをIRAI_DATAに記録したならば
	依頼連れ出し対象_ID = IRAI_DATA:CHK_SLOT / 1000
これで取得します

CASE "依頼サブ"
	CALLF MAKE_INT(V_NAME, 依頼連れ出し対象_ID)
もしも依頼連れ出し対象_IDをIRAI_SUBに記録したならば
	依頼連れ出し対象_ID = IRAI_SUB:CHK_SLOT
これで取得します

３．呼び出し元に返す
	CALLF MAKE_INT(V_NAME, 依頼連れ出し対象_ID)
これで呼び出し元で誰を連れ出せるのかが判定できます

例）依頼サブに記録していた場合の実際の記述（#DIM 等は省略）
CASE "依頼サブ"
	;ここの抽選はサンプルでありかなり適当
	依頼連れ出し対象_ID = RAND:100 + 1
	CALLF MAKE_INT(V_NAME, 依頼連れ出し対象_ID)
CASE "依頼連れ出し対象"
	CHK_SLOT = SEARCH_IRAI_SLOT(CFLAG:CLIENT_ID:依頼内容)
	依頼連れ出し対象_ID = IRAI_SUB:CHK_SLOT
	CALLF MAKE_INT(V_NAME, 依頼連れ出し対象_ID)




===============================================================================================
ここまで、@一般依頼XのO_DATAの各項目についての説明
===============================================================================================



・@IRAI_一般X
依頼の実処理を記述します
文字列型引数SCENEを利用した分岐をおこなっています

CASE "依頼条件表示"
この項目だけ特殊です
依頼の確認の際に既存のものとは別に独自の項目を設ける場合にここに記述します
何度でも使用可能なのでSOURCEやCFLAGなどの変数への操作は行なってはいけません
PRINT系の命令のみを使用するようにして下さい
WAITも設定しないほうがいいでしょう

CASE "依頼実行時"
依頼を実行した際の処理です
地の文を含めて自由に書いて下さい

注意してほしいのは
業種：伝令（場所）などの場合には誰がTARGETになっているのかわからない、という点です
	SOURCE:歓楽 = 500
このように書くとたまたま居合わせただけのキャラにSOURCEが入ってしまうことがあります
依頼の内容によっては不自然なことになります
よく確認してください

この項目では戻り値が意味を持つため、注意してRETURNを扱って下さい
内訳はこのようになっています
-2:キャンセル（選択肢があり、実行しなかった時）
-1:実行して失敗
 0:実行して成功
 1:実行して依頼続行（未解決状態、時間経過あり）

この時点でTARGETとCLIENTが同一人物である（かつ成功/失敗が確定している）場合には
この処理が終わった直後に即座に報告処理に移り、下記の依頼成功時/依頼失敗時の分岐に入ります


CASE "依頼成功時"
成功報告時の報酬などです
報酬処理のほか、好感度信頼度の増減を行います

CASE "依頼失敗時"
失敗報告時の処理
好感度信頼度の増減を行います
期限切れの状態で依頼人に遭遇しても呼ばれます

CASE "依頼報告不要"
依頼報告不要オプションでの依頼を成功させ、かつ報告しなかった場合の処理です
この項目は単体では機能しません
先に@一般/固有依頼Xの側で同様に"依頼報告不要"のオプションを付与しておく必要があります
依頼報告が必要でない依頼で報酬などの追加処理が欲しい場合にはここで処理を設定することができます
ここで記述した処理の後に依頼用の口上（ROLE = NO_REPORT）が呼び出されます
ここで設定されるのは依頼として設定する報酬や地の文です
各キャラで個別に報酬を設定したい場合には依頼口上のNO_REPORT分岐で設定することが可能です


ｂ）固有依頼を実装する場合
固有依頼は各キャラに固有の依頼です
必要な改変は以下のとおり
・@キャラデータXの改変
・@固有依頼Xの追加（もしくは改変）
・@IRAI_固有Xの追加（もしくは改変）
固有依頼はキャラごとに関数を作って管理を行なっています
Xはキャラ番号です


・@キャラデータXの改変
霊夢さんを参考に改変して下さい
注意すべき点として、@キャラデータXで依頼関連のデータを読むときには
ARGにはIRAI_SLOTの中身（依頼者情報＋依頼ID）が入ってます
登録番号ではありません


各項目の説明
CASE "依頼なし発生率"
	CALLF MAKE_INT(V_NAME, "2")
CASE "一般依頼発生率"
	CALLF MAKE_INT(V_NAME, "3")
CASE "固有依頼発生率"
	CALLF MAKE_INT(V_NAME, "5")

こう記述した場合、
　依頼が不発　＝20％
　一般依頼発生＝30％
　固有依頼発生＝50％
となります

キャラごとに依頼発生率を変えられます（し、素質などでの分岐も可能）
例）
依姫さまが陥落後にあなたを頼るようになる演出
（固有が未実装なので不発/一般の発生率だけいじるよ）
	未陥落、依頼は全く発生しない
	　不発1/一般0/固有0
	思慕、時々発生する
	　不発7/一般3/固有0
	恋慕、頼ってくれる
	　不発3/一般7/固有0
まー、100キャラ以上いちいち設定すんのはクソ面倒だけどな！



CASE "固有依頼最終要素"
	CALLF MAKE_INT(V_NAME, 103)
このキャラは101～103まで固有依頼がありますよ、ということを示します
ここをミスってると固有依頼が発生しません
例えば104まで作ったらここは104にしなくてはいけません
番号抜けがあっても動作に支障はないはずですがわかりにくいので連番にしましょう
固有依頼の番号は101からスタートして下さい

CASEELSE
	;固有依頼関連のデータにバトンタッチ
	SIF STRCOUNT(O_DATA, "依頼")
		CALLF 固有依頼X(ARG, O_DATA, V_NAME)
		;Xは各キャラの番号、1＝霊夢
ENDSELECT

その他のO_DATAで「依頼」の語が含まれる項目については
そのまま@固有依頼Xに渡してしまいます
関数@キャラデータXの改変はここまで



・@固有依頼X/@IRAI_固有Xの記述
複数の依頼がまとめてある、という点を除けば、
@固有依頼X/@IRAI_固有Xに書いてあることは一般依頼側の同名関数と同一です

固有依頼ではキャラごとに関数を作って管理しており
固有依頼系の関数は1関数で複数の依頼の情報を記述してあります

引数は一般依頼ではARGには依頼者の登録番号が入っているのに対し、
固有依頼ではARGはIRAI_SLOTの中身（依頼者情報＋依頼ID）になっています



・キャラに色々と喋らせたい時
依頼テンプレートのフォルダに入っているM_KOJO_KX_依頼.ERBを使って下さい
@M_KOJO_IRAI_KXを設定することでセリフを表示させることができます
基本的にはTARGETとして目の前にいる状態でのセリフです

CASE "CLIENT"
この項目ではキャラが依頼者かつTARGETになっている時のセリフを記述しています

CASE "TARGET"
この項目ではキャラが依頼者ではなく、TARGETになっている時のセリフを記述しています
依頼の目的になっている人物かもしれませんし、たまたま目の前に居合わせただけの人物かもしれません
対象となる依頼によって変化するので確認して下さい

CASE "NO_REPORT"
この項目は特殊で、日数経過時に呼ばれます
依頼報告不要オプションでの依頼を成功させ、かつ報告しなかった場合の口上です

報酬が設定されていない場合に独自に報酬を渡したりすることも可能ですが
その場合は地の文が設定されていないので
誰の口上なのかはっきりわかるようにして下さい
また、TARGETに設定されていない可能性が高い点にも注意してください
	CALL CHANGE_CFLAG(2, TARGET, 15)
	CALL CHANGE_CFLAG(4, TARGET, 7)
こういうことをすると意図しない相手のCFLAGを操作してしまう可能性があります


◆このファイルの更新履歴
2017/08/25
更新：eraTW4542_Irai_Kaizou_m01
・新規項目追加、"依頼報告不要"
　このオプション（文字列）を設定すると報告忘れによるペナルティがなくなります
　報告をしなかった場合の報酬を設定することもできます

2017/08/16
更新：eraTW4541_Irai_bugfix_m03
・235スレ>>606の紅魔館在住あなたのおかげでずっと欲しかった機能が実装できたよ
・[era0010140]パッチの取り込みに伴い機能拡張
・新規項目追加、"依頼人連れ出し可能", "依頼連れ出し対象"
　この項目を設定すると、依頼人や各依頼で指定した一名を連れ出せるようになります
　ただしMAIN_MAP以外では機能しない
・面会依頼を廃止、依頼の業種番号の2は空き番号に
　仕様上、達成があまりにも困難であることがわかったため

2017/07/25
初版：[eraT0010119]eraTW4533_Reform_Irai_m01
　　　eraTW4.533用依頼大改造人柱パッチm01
