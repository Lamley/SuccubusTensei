;汎用・キャラリスト作成関数
;条件についてはCHECK_CHARA関数を参照
;条件に合致するキャラのリストを作成する
@MAKE_CHARA_LIST(LIST_TYPE, L_ID, CHARA_LIST, CHARA_CNT)
#LOCALSIZE 1
#LOCALSSIZE 1
#DIMS LIST_TYPE
#DIM C_ID
#DIM REF L_ID       ;リストのクラスID
#DIM REF CHARA_LIST ;キャラ一覧
#DIM REF CHARA_CNT  ;キャラカウンタ
VARSET CHARA_LIST
VARSET CHARA_CNT
L_ID = OBJNAME_TO_ID(0, "GET", "キャラリスト", LIST_TYPE)
IF L_ID == -1
	FOR C_ID, 0, CHARANUM
		SIF !CHECK_CHARA(C_ID, LIST_TYPE)
			CONTINUE
		CHARA_LIST:CHARA_CNT = C_ID
		CHARA_CNT ++
	NEXT
ELSE
	FOR C_ID, 0, CHARANUM
		SIF !GET_INT(C_ID, "キャラリスト", L_ID, "判定")
			CONTINUE
		CHARA_LIST:CHARA_CNT = C_ID
		CHARA_CNT ++
	NEXT
ENDIF
; PRINTFORMW CHARA_CNT{CHARA_CNT}



;@SHOW_CHARA_LISTが機能盛りすぎて使いにくくなったのでシンプルなやつも
;配列に収められている数値のキャラをずらっと無造作にボタンとして表示するだけ
;先にキャラリスト作ってないとつかえません
;リストに無い数値は弾き、999はキャンセル扱いです
@SIMPLE_CHARA_LIST(CHARA_LIST, CHARA_CNT, OP)
#DIM  REF CHARA_LIST ;リスト本体、登録番号にて記録
#DIM  REF CHARA_CNT  ;リストに該当したキャラの数
#DIMS OP
FOR LOCAL, 0, CHARA_CNT
	PRINTFORML [{LOCAL, 3}] - %CALLNAME:(CHARA_LIST:LOCAL)%
NEXT
PRINTFORML 
PRINTFORML [999] - 返回
DO
	INPUT
	SELECTCASE RESULT
	CASE 999
		RETURN 999
	CASEELSE
		SIF INRANGE(RESULT, 0, CHARA_CNT - 1)
			RETURN RESULT
		REUSELASTLINE 无效输入
		CONTINUE
	ENDSELECT
LOOP 1



;リストソート関数
;対象配列変数を登録番号の羅列とみなしてINPUT_STRの内容に応じてSORTしなおす
;引数は全て必須
;ソート自体はともかく其他の制御部分がやや複雑化したか
;ソートアルゴリズムはwikipediaからコピペってみたノームソート
;1万件とかのデータ使うわけでなしシンプルなのでいいんじゃね？
;INPUT_STRに使える文字列は「DISP_MEMO:X＋（降順or昇順）」
;DISP_MEMOで名前衝突を起こすとバグるので追加の際は注意
;具体的には"時姦"は刻印ということにしているので経験用に追加しても使えない
;DISP_MEMOを変更するなら@CHARA_BUTTON,@SHOW_CHARA_LISTも変更の必要があるので注意
@SORT_LIST(INPUT_STR, CHARA_LIST, CHARA_CNT)
#DIMS     INPUT_STR  ;ソート内容の指示
#DIM      MEMO_TYPE  ;今回のソート項目、CSVでの要素数
#DIMS     CHECK_VAR  ;チェック対象となる変数名
#DIMS     CHECK_TYPE ;比較演算子の種類
#DIM      NUM_LOOP   ;ループ回数
#DIM  REF CHARA_LIST ;キャラリストの内容配列
#DIM      CHARA_CNT  ;リストに含まれるキャラ数
;ソート項目の種別
{
#DIMS CONST DISP_MEMO , 24 = 
	"体力", "気力", 
	"Ｃ感", "Ｖ感", "Ａ感", "Ｂ感", "Ｍ感", 
	"親密", "従順", "欲望", "技巧", 
	"指技", "舌技", "胸技", "腰技", "膣技", "Ａ技", 
	"苦痛", "快楽", "不埒", "反発", "時姦", 
	"好感", "信頼"
}
;ソート項目の各キャラ変数における位置
{
#DIM CONST MEMO_ID , 24 = 
	 0,  1, 
	 0,  1,  2,  3,  4, 
	 9, 10, 11, 12, 
	50, 51, 52, 53, 54, 55, 
	 0,  1,  2,  3,  5, 
	 2,  4
}
;ソート項目の検索
MEMO_TYPE = 0
NUM_LOOP = VARSIZE("DISP_MEMO")
FOR LOCAL, 0, NUM_LOOP
	IF STRCOUNT(INPUT_STR, DISP_MEMO:LOCAL)
		MEMO_TYPE = LOCAL
		BREAK
	ENDIF
	SIF LOCAL == NUM_LOOP - 1
		THROW 不正なINPUT_STR　%INPUT_STR%
NEXT

SELECTCASE DISP_MEMO:MEMO_TYPE
CASE "体力", "気力"
	CHECK_VAR '= "BASE"
CASE "Ｃ感", "Ｖ感", "Ａ感", "Ｂ感", "Ｍ感", "親密", "従順", "欲望", "技巧"
	CHECK_VAR '= "ABL"
CASE "指技", "舌技", "胸技", "腰技", "膣技", "Ａ技", 
	CHECK_VAR '= "ABL"
CASE "苦痛", "快楽", "不埒", "反発", "時姦", 
	CHECK_VAR '= "MARK"
CASE "好感", "信頼"
	CHECK_VAR '= "CFLAG"
CASEELSE
	THROW 不正なDISP_MEMO:MEMO_TYPE %DISP_MEMO:MEMO_TYPE%、MEMO_TYPE {MEMO_TYPE}
ENDSELECT

IF STRCOUNT(INPUT_STR, "降順")
	CHECK_TYPE '= ">="
ELSEIF STRCOUNT(INPUT_STR, "昇順")
	CHECK_TYPE '= "<="
ELSE
	THROW 不正なINPUT_STR %INPUT_STR%
ENDIF

;ソート実処理
LOCAL:0 = 1
WHILE LOCAL:0 < CHARA_CNT
	SIF !(LOCAL:0)
		LOCAL:0 ++
	IF CHARA_COMPARE(CHECK_VAR, MEMO_ID:MEMO_TYPE, CHARA_LIST:(LOCAL:0 - 1), CHECK_TYPE, CHARA_LIST:(LOCAL:0))
		LOCAL:0 ++
	ELSE
		SWAP CHARA_LIST:(LOCAL:0 - 1), CHARA_LIST:(LOCAL:0)
		LOCAL:0 --
	ENDIF
WEND


;各クラスをリスト化表示
;とても無造作にCLASS内に存在するものを提示する、そんだけ
@CLASS_LIST(CLASS_NAME, CHECK_NAME)
#DIMS CLASS_NAME  ;表示対象となるクラスの名称
#DIMS CHECK_NAME  ;判定対象項目（INT限定）、未設定なら存在するものをすべて表示
IF STRLENS(CHECK_NAME)
	FOR LOCAL, OBJ_ID_FIRST, OBJ_ID_LAST + 1
		SIF !GET_INT(0, CLASS_NAME, LOCAL, CHECK_NAME)
			CONTINUE
		PRINTFORML [{LOCAL, 3}] - %GET_STR(0, CLASS_NAME, LOCAL, "名前")%
	NEXT
ELSE
	FOR LOCAL, OBJ_ID_FIRST, OBJ_ID_LAST + 1
		SIF !STRLENS(GET_STR(0, CLASS_NAME, LOCAL, "名前"))
			CONTINUE
		PRINTFORML [{LOCAL, 3}] - %GET_STR(0, CLASS_NAME, LOCAL, "名前")%
	NEXT
ENDIF

